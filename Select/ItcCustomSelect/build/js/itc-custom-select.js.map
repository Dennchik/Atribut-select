{"version":3,"names":[],"mappings":"","sources":["itc-custom-select.js"],"sourcesContent":["\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar ItcCustomSelect = /*#__PURE__*/function () {\n  function ItcCustomSelect(target, params) {\n    _classCallCheck(this, ItcCustomSelect);\n\n    this._el = typeof target === 'string' ? document.querySelector(target) : target;\n    this._params = params || {};\n    this._onClickFn = this._onClick.bind(this);\n\n    if (this._params.options) {\n      this._el.innerHTML = this.constructor.template(this._params);\n\n      this._el.classList.add(this.constructor.EL);\n    }\n\n    this._elToggle = this._el.querySelector(this.constructor.DATA_TOGGLE);\n\n    this._el.addEventListener('click', this._onClickFn);\n  }\n\n  _createClass(ItcCustomSelect, [{\n    key: \"_onClick\",\n    value: function _onClick(e) {\n      var target = e.target;\n      var type = target.closest(this.constructor.DATA).dataset.select;\n\n      if (type === 'toggle') {\n        this.toggle();\n      } else if (type === 'option') {\n        this._changeValue(target);\n      }\n    }\n  }, {\n    key: \"_updateOption\",\n    value: function _updateOption(el) {\n      var elOption = el.closest(\".\".concat(this.constructor.EL_OPTION));\n\n      var elOptionSel = this._el.querySelector(\".\".concat(this.constructor.EL_OPTION_SELECTED));\n\n      if (elOptionSel) {\n        elOptionSel.classList.remove(this.constructor.EL_OPTION_SELECTED);\n      }\n\n      elOption.classList.add(this.constructor.EL_OPTION_SELECTED);\n      this._elToggle.textContent = elOption.textContent;\n      this._elToggle.value = elOption.dataset.value;\n      this._elToggle.dataset.index = elOption.dataset.index;\n\n      this._el.dispatchEvent(new CustomEvent('itc.select.change'));\n\n      this._params.onSelected ? this._params.onSelected(this, elOption) : null;\n      return elOption.dataset.value;\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      var selected = this._el.querySelector(\".\".concat(this.constructor.EL_OPTION_SELECTED));\n\n      if (selected) {\n        selected.classList.remove(this.constructor.EL_OPTION_SELECTED);\n      }\n\n      this._elToggle.textContent = 'Выберите из списка';\n      this._elToggle.value = '';\n      this._elToggle.dataset.index = '-1';\n\n      this._el.dispatchEvent(new CustomEvent('itc.select.change'));\n\n      this._params.onSelected ? this._params.onSelected(this, null) : null;\n      return '';\n    }\n  }, {\n    key: \"_changeValue\",\n    value: function _changeValue(el) {\n      if (el.classList.contains(this.constructor.EL_OPTION_SELECTED)) {\n        return;\n      }\n\n      this._updateOption(el);\n\n      this.hide();\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this = this;\n\n      document.querySelectorAll(this.constructor.EL_SHOW).forEach(function (el) {\n        el.classList.remove(_this.constructor.EL_SHOW);\n      });\n\n      this._el.classList.add(\"\".concat(this.constructor.EL_SHOW));\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._el.classList.remove(this.constructor.EL_SHOW);\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this._el.classList.contains(this.constructor.EL_SHOW) ? this.hide() : this.show();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._el.removeEventListener('click', this._onClickFn);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._elToggle.value;\n    },\n    set: function set(value) {\n      var _this2 = this;\n\n      var isExists = false;\n\n      this._el.querySelectorAll('.select__option').forEach(function (option) {\n        if (option.dataset.value === value) {\n          isExists = true;\n\n          _this2._updateOption(option);\n        }\n      });\n\n      if (!isExists) {\n        this._reset();\n      }\n    }\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      return this._elToggle.dataset.index;\n    },\n    set: function set(index) {\n      var option = this._el.querySelector(\".select__option[data-index=\\\"\".concat(index, \"\\\"]\"));\n\n      if (option) {\n        this._updateOption(option);\n      }\n\n      this._reset();\n    }\n  }], [{\n    key: \"template\",\n    value: function template(params) {\n      var _this3 = this;\n\n      var name = params.name,\n          options = params.options,\n          targetValue = params.targetValue;\n      var items = [];\n      var selectedIndex = -1;\n      var selectedValue = '';\n      var selectedContent = 'Выберите из списка';\n      options.forEach(function (option, index) {\n        var selectedClass = '';\n\n        if (option[0] === targetValue) {\n          selectedClass = \" \".concat(_this3.EL_OPTION_SELECTED);\n          selectedIndex = index;\n          selectedValue = option[0];\n          selectedContent = option[1];\n        }\n\n        items.push(\"<li class=\\\"itc-select__option\".concat(selectedClass, \"\\\"data-select=\\\"option\\\"\\n    data-value=\\\"\").concat(option[0], \"\\\" data-index=\\\"\").concat(index, \"\\\">\").concat(option[1], \"</li>\"));\n      });\n      return \"<button type=\\\"button\\\" class=\\\"itc-select__toggle\\\" name=\\\"\".concat(name, \"\\\"\\n    value=\\\"\").concat(selectedValue, \"\\\" data-select=\\\"toggle\\\" data-index=\\\"\").concat(selectedIndex, \"\\\">\\n    \").concat(selectedContent, \"</button><div class=\\\"itc-select__dropdown\\\">\\n    <ul class=\\\"itc-select__options\\\">\").concat(items.join(''), \"</ul></div>\");\n    }\n  }, {\n    key: \"hideOpenSelect\",\n    value: function hideOpenSelect() {\n      var _this4 = this;\n\n      document.addEventListener('click', function (e) {\n        if (!e.target.closest(\".\".concat(_this4.EL))) {\n          var elsActive = document.querySelectorAll(\".\".concat(_this4.EL_SHOW));\n          elsActive.forEach(function (el) {\n            el.classList.remove(_this4.EL_SHOW);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create(target, params) {\n      this._el = typeof target === 'string' ? document.querySelector(target) : target;\n\n      if (this._el) {\n        return new this(target, params);\n      }\n\n      return null;\n    }\n  }]);\n\n  return ItcCustomSelect;\n}();\n\n_defineProperty(ItcCustomSelect, \"EL\", 'itc-select');\n\n_defineProperty(ItcCustomSelect, \"EL_SHOW\", 'itc-select_show');\n\n_defineProperty(ItcCustomSelect, \"EL_OPTION\", 'itc-select__option');\n\n_defineProperty(ItcCustomSelect, \"EL_OPTION_SELECTED\", 'itc-select__option_selected');\n\n_defineProperty(ItcCustomSelect, \"DATA\", '[data-select]');\n\n_defineProperty(ItcCustomSelect, \"DATA_TOGGLE\", '[data-select=\"toggle\"]');\n\nItcCustomSelect.hideOpenSelect();"],"file":"itc-custom-select.js"}